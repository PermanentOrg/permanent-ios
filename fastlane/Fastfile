# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"
  
  lane :tests do
    # add actions here: https://docs.fastlane.tools/actions
    cocoapods(use_bundle_exec: true,
              podfile: "./Podfile")
    run_tests(workspace: "Permanent.xcworkspace",
              devices: ["iPhone 13"],
              scheme: "Permanent-DEV",
	            configuration: "DEV-Debug",
              testplan: "TestPullRequest",
	            reset_simulator: true)
  end

  lane :beta do
    # resolve cocoapods
    cocoapods(use_bundle_exec: true,
              podfile: "./Podfile")
              
    # connect to the app store
    app_store_connect_api_key(duration: 1200, # optional (maximum 1200)
                              in_house: false,
                              is_key_content_base64: true
                              )
                              
    # resolve the provisioning profiles and certs from private repo
    match(type: "adhoc",
          readonly: true,
          app_identifier: "org.permanent.permanent.staging",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )
    match(type: "adhoc",
          readonly: true,
          app_identifier: "org.permanent.permanent.staging.PushExtension",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )
    match(type: "adhoc",
          readonly: true,
          app_identifier: "org.permanent.permanent.staging.ShareExtension",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )

    # get the latest release build # from firebase
    latest_release = firebase_app_distribution_get_latest_release(app: ENV['GOOGLE_APP_ID'])
    if latest_release
      # update the app build number
      increment_build_number({ build_number: latest_release[:buildVersion].to_i + 1 })
    end

    # actually build the app
    build_app(scheme: "Permanent-DEV",
	            configuration: "DEV-Release",
	            xcargs: "-allowProvisioningUpdates",
              include_bitcode: false,
              export_method: "ad-hoc")

    # get the change log - all the commits since the last tag in git
    changelog = changelog_from_git_commits(merge_commit_filtering: 'exclude_merges')

    # upload to firebase
	  firebase_app_distribution(release_notes: changelog,
                              firebase_cli_token: ENV['FIREBASEAPPDISTRO_CLI_TOKEN'])
  end
  
  lane :app_store do 
    # resolve cocoapods
    cocoapods(use_bundle_exec: true,
              podfile: "./Podfile")
           
    # connect to the app store
    app_store_connect_api_key(duration: 1200, # optional (maximum 1200)
                              in_house: false,
                              is_key_content_base64: true
                              )

    # resolve the provisioning profiles and certs from private repo
    match(type: "appstore",
          readonly: true,
          app_identifier: "org.permanent.PermanentArchive",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )
    match(type: "appstore",
          readonly: true,
          app_identifier: "org.permanent.PermanentArchive.PushExtension",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )
    match(type: "appstore",
          readonly: true,
          app_identifier: "org.permanent.PermanentArchive.ShareExtension",
          git_url: "https://#{ENV['FASTLANE_MATCH_TOKEN']}@github.com/v-rusu/permanent-ios-certs.git"
          )

    # get the latest release build # from firebase
    latest_release = latest_testflight_build_number(app_identifier: "org.permanent.PermanentArchive")
    if latest_release
      # update the app build number
      increment_build_number({ build_number: latest_release + 1 })
    end

     # actually build the app
    build_app(workspace: "Permanent.xcworkspace",
              scheme: "Permanent",
	            configuration: "Release",
              include_bitcode: true,
	            xcargs: "-allowProvisioningUpdates",
              export_method: "app-store")

    #upload to TestFlight
    upload_to_testflight(app_identifier: "org.permanent.PermanentArchive")
  end
end
